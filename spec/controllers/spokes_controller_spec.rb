require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SpokesController do

  # This should return the minimal set of attributes required to create a valid
  # Spoke. As you add validations to Spoke, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { FactoryGirl.attributes_for :spoke }

  describe 'GET index' do
    it 'assigns all spokes as @spokes' do
      spoke = Spoke.create! valid_attributes
      get :index
      assigns(:spokes).should eq([spoke])
    end
  end

  describe 'GET show' do
    it 'assigns the requested spoke as @spoke' do
      spoke = Spoke.create! valid_attributes
      get :show, id: spoke.to_param
      assigns(:spoke).should eq(spoke)
    end
  end

  describe 'GET new' do
    it 'assigns a new spoke as @spoke' do
      get :new
      assigns(:spoke).should be_a_new(Spoke)
    end
  end

  describe 'GET edit' do
    it 'assigns the requested spoke as @spoke' do
      spoke = Spoke.create! valid_attributes
      get :edit, id: spoke.to_param
      assigns(:spoke).should eq(spoke)
    end
  end

  describe 'POST create' do
    describe 'with valid params' do
      it 'creates a new Spoke' do
        expect {
          post :create, spoke: valid_attributes
        }.to change(Spoke, :count).by(1)
      end

      it 'assigns a newly created spoke as @spoke' do
        post :create, spoke: valid_attributes
        assigns(:spoke).should be_a(Spoke)
        assigns(:spoke).should be_persisted
      end

      it 'redirects to the created spoke' do
        post :create, spoke:  valid_attributes
        response.should redirect_to(Spoke.last)
      end
    end

    describe 'with invalid params' do
      it 'assigns a newly created but unsaved spoke as @spoke' do
        # Trigger the behavior that occurs when invalid params are submitted
        Spoke.any_instance.stub(:save).and_return(false)
        post :create, spoke: { 'name' => 'invalid value' }
        assigns(:spoke).should be_a_new(Spoke)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Spoke.any_instance.stub(:save).and_return(false)
        post :create, spoke: { 'name' => 'invalid value' }
        response.should render_template('new')
      end
    end
  end

  describe 'PUT update' do
    describe 'with valid params' do
      it 'updates the requested spoke' do
        spoke = Spoke.create! valid_attributes
        # Assuming there are no other spokes in the database, this
        # specifies that the Spoke created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Spoke.any_instance.should_receive(:update).with({ 'name' => 'MyString' })
        put :update, id: spoke.to_param, spoke: { 'name' => 'MyString' }
      end

      it 'assigns the requested spoke as @spoke' do
        spoke = Spoke.create! valid_attributes
        put :update, id: spoke.to_param, spoke: valid_attributes
        assigns(:spoke).should eq(spoke)
      end

      it 'redirects to the spoke' do
        spoke = Spoke.create! valid_attributes
        put :update, id:  spoke.to_param, spoke: valid_attributes
        response.should redirect_to(spoke)
      end
    end

    describe 'with invalid params' do
      it 'assigns the spoke as @spoke' do
        spoke = Spoke.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Spoke.any_instance.stub(:save).and_return(false)
        put :update, id: spoke.to_param, spoke: { 'name' => 'invalid value' }
        assigns(:spoke).should eq(spoke)
      end

      it "re-renders the 'edit' template" do
        spoke = Spoke.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Spoke.any_instance.stub(:save).and_return(false)
        put :update, id: spoke.to_param, spoke: { 'name' => 'invalid value' }
        response.should render_template('edit')
      end
    end
  end

  describe 'DELETE destroy' do
    it 'destroys the requested spoke' do
      spoke = Spoke.create! valid_attributes
      expect {
        delete :destroy, id: spoke.to_param
      }.to change(Spoke, :count).by(-1)
    end

    it 'redirects to the spokes list' do
      spoke = Spoke.create! valid_attributes
      delete :destroy, id: spoke.to_param
      response.should redirect_to(spokes_url)
    end
  end
end
